{"version":3,"file":"comlink.min.js","sources":["../../src/comlink.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType\n} from \"./protocol.js\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nconst throwSet = new WeakSet();\n\n// prettier-ignore\ntype Promisify<T> = T extends { [proxyMarker]: boolean }\n  ? Promise<Remote<T>>\n  : T extends Promise<any>\n    ? T\n    : T extends (...args: infer R1) => infer R2\n      ? (...args: R1) => Promisify<R2>\n      : Promise<T>;\n\n// prettier-ignore\nexport type Remote<T> =\n  (\n    T extends (...args: infer R1) => infer R2\n      ? (...args: R1) => Promisify<R2>\n      : { [K in keyof T]: Promisify<T[K]> }\n  ) & (\n    T extends { new (...args: infer R1): infer R2 }\n      ? { new (...args: R1): Promise<Remote<R2>> }\n      : unknown\n  );\n\nexport interface TransferHandler {\n  canHandle(obj: any): boolean;\n  serialize(obj: any): [any, Transferable[]];\n  deserialize(obj: any): any;\n}\n\nexport const transferHandlers = new Map<string, TransferHandler>([\n  [\n    \"proxy\",\n    {\n      canHandle: obj => obj && obj[proxyMarker],\n      serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n      },\n      deserialize: (port: MessagePort) => {\n        port.start();\n        return wrap(port);\n      }\n    }\n  ],\n  [\n    \"throw\",\n    {\n      canHandle: obj => throwSet.has(obj),\n      serialize(obj) {\n        const isError = obj instanceof Error;\n        let serialized = obj;\n        if (isError) {\n          serialized = {\n            isError,\n            message: obj.message,\n            stack: obj.stack\n          };\n        }\n        return [serialized, []];\n      },\n      deserialize(obj) {\n        if ((obj as any).isError) {\n          throw Object.assign(new Error(), obj);\n        }\n        throw obj;\n      }\n    }\n  ]\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", (async (ev: MessageEvent) => {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message)\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = await rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = await rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = await new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        default:\n          console.warn(\"Unrecognized message\", ev.data);\n      }\n    } catch (e) {\n      returnValue = e;\n      throwSet.add(e);\n    }\n    const [wireValue, transferables] = toWireValue(returnValue);\n    ep.postMessage({ ...wireValue, id }, transferables);\n  }) as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nexport function wrap<T>(ep: Endpoint): Remote<T> {\n  return createProxy<T>(ep) as any;\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = []\n): Remote<T> {\n  const proxy: Function = new Proxy(function() {}, {\n    get(_target, prop) {\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map(p => p.toString()),\n          value\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map(p => p.toString()),\n          argumentList\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map(p => p.toString()),\n          argumentList\n        },\n        transferables\n      ).then(fromWireValue);\n    }\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer(obj: any, transfers: Transferable[]) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & { [proxyMarker]: true } {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, \"*\", transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue\n        },\n        transferables\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value\n    },\n    transferCache.get(value) || []\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n"],"names":["proxyMarker","Symbol","createEndpoint","throwSet","WeakSet","transferHandlers","Map","canHandle","obj","[object Object]","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","has","isError","Error","serialized","message","stack","Object","assign","ep","self","addEventListener","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","value","apply","proxy","transfer","console","warn","e","add","wireValue","transferables","toWireValue","postMessage","createProxy","Proxy","_target","length","then","r","requestResponseMessage","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","concat","transferCache","WeakMap","transfers","set","name","handler","serializedValue","serialize","get","msg","Promise","resolve","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","removeEventListener","w","context"],"mappings":"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"}